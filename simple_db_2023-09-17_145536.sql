-- Generated by the database client, not guaranteed complete.
CREATE TABLE department(
    id SERIAL NOT NULL,
    code text NOT NULL DEFAULT ''::text,
    name text NOT NULL DEFAULT ''::text,
    parent_id integer DEFAULT 0,
    sort integer DEFAULT 0,
    level integer DEFAULT 0,
    is_leaf boolean DEFAULT false,
    expanded boolean DEFAULT false,
    PRIMARY KEY(id)
);
CREATE UNIQUE INDEX department_code_idx ON "department" USING btree ("code");
CREATE INDEX department_sort_idx ON "department" USING btree ("sort");
COMMENT ON TABLE "department" IS '部门管理表';
COMMENT ON COLUMN department.id IS '主键Id';
COMMENT ON COLUMN department.code IS '部门ID，内容为010101，即每低一级部门，编码增加两位小数';
COMMENT ON COLUMN department.name IS '部门名称';
COMMENT ON COLUMN department.parent_id IS '父ID';
COMMENT ON COLUMN department.sort IS '排序';
COMMENT ON COLUMN department.level IS '树列表深度级别，即当前数据在哪一级';
COMMENT ON COLUMN department.is_leaf IS '是否最终节点';
COMMENT ON COLUMN department.expanded IS '此节点是否展开，后台菜单列表js要用到，不用进行编辑';

-- Generated by the database client, not guaranteed complete.
CREATE TABLE group(
    id SERIAL NOT NULL,
    name character varying(60) NOT NULL,
    "type" character varying(20) NOT NULL,
    code character varying(50) NOT NULL,
    parent_id integer,
    PRIMARY KEY(id),
    CONSTRAINT group_parent_id_fkey FOREIGN key(parent_id) REFERENCES group(id)
);
CREATE UNIQUE INDEX group_code ON ""group"" USING btree ("code");
CREATE INDEX group_parent_id ON ""group"" USING btree ("parent_id");

-- Generated by the database client, not guaranteed complete.
CREATE TABLE group_role_through(
    id SERIAL NOT NULL,
    group_id integer NOT NULL,
    role_id integer NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT group_role_through_group_id_fkey FOREIGN key(group_id) REFERENCES group(id),CONSTRAINT group_role_through_role_id_fkey FOREIGN key(role_id) REFERENCES role(id)
);
CREATE INDEX group_role_through_group_id ON "group_role_through" USING btree ("group_id");
CREATE INDEX group_role_through_role_id ON "group_role_through" USING btree ("role_id");
CREATE UNIQUE INDEX group_role_through_group_id_role_id ON "group_role_through" USING btree ("group_id","role_id");

-- Generated by the database client, not guaranteed complete.
CREATE TABLE infomation(
    id SERIAL NOT NULL,
    title text DEFAULT ''::text,
    front_cover_img text DEFAULT ''::text,
    content text DEFAULT ''::text,
    add_time timestamp without time zone NOT NULL DEFAULT now(),
    PRIMARY KEY(id)
);
COMMENT ON TABLE "infomation" IS '信息表';
COMMENT ON COLUMN infomation.id IS '主键Id';
COMMENT ON COLUMN infomation.title IS '标题';
COMMENT ON COLUMN infomation.front_cover_img IS '封面图片地址（首页）';
COMMENT ON COLUMN infomation.content IS '内容';
COMMENT ON COLUMN infomation.add_time IS '添加时间';

-- Generated by the database client, not guaranteed complete.
CREATE TABLE manager(
    id SERIAL NOT NULL,
    login_name text NOT NULL DEFAULT ''::text,
    login_password text NOT NULL DEFAULT ''::text,
    login_key text DEFAULT ''::text,
    last_login_time timestamp without time zone,
    last_login_ip text DEFAULT ''::text,
    login_count integer DEFAULT 0,
    create_time timestamp without time zone NOT NULL DEFAULT now(),
    department_id integer DEFAULT 0,
    department_code text DEFAULT ''::text,
    department_name text DEFAULT ''::text,
    positions_id integer DEFAULT 0,
    positions_name text DEFAULT ''::text,
    is_work boolean DEFAULT false,
    is_enabled boolean DEFAULT false,
    name text NOT NULL DEFAULT ''::text,
    sex text DEFAULT ''::text,
    birthday date,
    mobile text DEFAULT ''::text,
    email text DEFAULT ''::text,
    remark text DEFAULT ''::text,
    manager_id integer DEFAULT 0,
    manager_name text DEFAULT ''::text,
    PRIMARY KEY(id)
);
CREATE INDEX manager_department_code_idx ON "manager" USING btree ("department_code");
CREATE INDEX manager_department_id_idx ON "manager" USING btree ("department_id");
CREATE INDEX manager_is_enabled_idx ON "manager" USING btree ("is_enabled");
CREATE INDEX manager_is_work_idx ON "manager" USING btree ("is_work");
CREATE INDEX manager_last_login_time_idx ON "manager" USING btree ("last_login_time");
CREATE UNIQUE INDEX manager_login_name_idx1 ON "manager" USING btree ("login_name");
CREATE INDEX manager_manager_id_idx ON "manager" USING btree ("manager_id");
CREATE INDEX manager_manager_name_idx ON "manager" USING btree ("manager_name");
CREATE INDEX manager_name_idx ON "manager" USING btree ("name");
CREATE INDEX manager_positions_id_idx ON "manager" USING btree ("positions_id");
COMMENT ON TABLE "manager" IS '管理员管理表';
COMMENT ON COLUMN manager.id IS '主键Id';
COMMENT ON COLUMN manager.login_name IS '登陆账号';
COMMENT ON COLUMN manager.login_password IS '登陆密码';
COMMENT ON COLUMN manager.login_key IS '登录密钥';
COMMENT ON COLUMN manager.last_login_time IS '最后登陆时间';
COMMENT ON COLUMN manager.last_login_ip IS '最后登陆IP';
COMMENT ON COLUMN manager.login_count IS '登陆次数';
COMMENT ON COLUMN manager.create_time IS '注册时间';
COMMENT ON COLUMN manager.department_id IS '部门自编号Id，用户只能归属于一个部门';
COMMENT ON COLUMN manager.department_code IS '部门编号';
COMMENT ON COLUMN manager.department_name IS '部门名称';
COMMENT ON COLUMN manager.positions_id IS '用户职位Id';
COMMENT ON COLUMN manager.positions_name IS '职位名称';
COMMENT ON COLUMN manager.is_work IS '0=离职，1=就职';
COMMENT ON COLUMN manager.is_enabled IS '账号是否启用，true=启用，false=禁用';
COMMENT ON COLUMN manager.name IS '用户中文名称';
COMMENT ON COLUMN manager.sex IS '性别（未知，男，女）';
COMMENT ON COLUMN manager.birthday IS '出生日期';
COMMENT ON COLUMN manager.mobile IS '手机号码';
COMMENT ON COLUMN manager.email IS '个人--联系邮箱';
COMMENT ON COLUMN manager.remark IS '备注';
COMMENT ON COLUMN manager.manager_id IS '操作人员id';
COMMENT ON COLUMN manager.manager_name IS '操作人员姓名';

-- Generated by the database client, not guaranteed complete.
CREATE TABLE manager_operation_log(
    id SERIAL NOT NULL,
    ip text DEFAULT ''::text,
    remark text DEFAULT ''::text,
    manager_id integer DEFAULT 0,
    manager_name text DEFAULT ''::text,
    add_time timestamp without time zone NOT NULL DEFAULT now(),
    PRIMARY KEY(id)
);
CREATE INDEX manager_operation_log_add_time_idx ON "manager_operation_log" USING btree ("add_time");
CREATE INDEX manager_operation_log_manager_id_idx ON "manager_operation_log" USING btree ("manager_id");
CREATE INDEX manager_operation_log_manager_name_idx ON "manager_operation_log" USING btree ("manager_name");
COMMENT ON TABLE "manager_operation_log" IS '管理员操作日志表';
COMMENT ON COLUMN manager_operation_log.id IS '主键Id';
COMMENT ON COLUMN manager_operation_log.ip IS '登陆IP';
COMMENT ON COLUMN manager_operation_log.remark IS '操作内容';
COMMENT ON COLUMN manager_operation_log.manager_id IS '操作人员id';
COMMENT ON COLUMN manager_operation_log.manager_name IS '操作人员姓名';
COMMENT ON COLUMN manager_operation_log.add_time IS '添加时间';

-- Generated by the database client, not guaranteed complete.
CREATE TABLE menu(
    id SERIAL NOT NULL,
    name character varying(30) NOT NULL,
    icon character varying(50),
    page_url text,
    interface_url text,
    parent_id integer NOT NULL,
    sort integer NOT NULL,
    level integer NOT NULL,
    is_leaf boolean NOT NULL,
    expanded boolean NOT NULL,
    is_show boolean NOT NULL,
    is_enabled boolean NOT NULL,
    PRIMARY KEY(id)
);

-- Generated by the database client, not guaranteed complete.
CREATE TABLE menu_info(
    id SERIAL NOT NULL,
    name text NOT NULL DEFAULT ''::text,
    icon text DEFAULT ''::text,
    page_url text DEFAULT ''::text,
    interface_url text DEFAULT ''::text,
    parent_id integer DEFAULT 0,
    sort integer DEFAULT 0,
    level integer DEFAULT 0,
    is_leaf boolean DEFAULT false,
    expanded boolean DEFAULT false,
    is_show boolean DEFAULT true,
    is_enabled boolean DEFAULT true,
    PRIMARY KEY(id)
);
CREATE INDEX menu_info_is_show_idx ON "menu_info" USING btree ("is_show");
CREATE INDEX menu_info_sort_idx ON "menu_info" USING btree ("sort");
COMMENT ON TABLE "menu_info" IS '菜单表';
COMMENT ON COLUMN menu_info.id IS '主键Id';
COMMENT ON COLUMN menu_info.name IS '菜单名称或各个页面功能名称';
COMMENT ON COLUMN menu_info.icon IS '菜单小图标（一级菜单需要设置，二级菜单不用）';
COMMENT ON COLUMN menu_info.page_url IS '各页面URL（主菜单与分类菜单没有URL）';
COMMENT ON COLUMN menu_info.interface_url IS '各接口url';
COMMENT ON COLUMN menu_info.parent_id IS '父ID';
COMMENT ON COLUMN menu_info.sort IS '排序';
COMMENT ON COLUMN menu_info.level IS '树列表深度级别，即当前数据在哪一级';
COMMENT ON COLUMN menu_info.is_leaf IS '是否最终节点';
COMMENT ON COLUMN menu_info.expanded IS '此节点是否展开，后台菜单列表js要用到，不用进行编辑';
COMMENT ON COLUMN menu_info.is_show IS '该菜单是否在菜单栏显示，false=不显示，true=显示';
COMMENT ON COLUMN menu_info.is_enabled IS '是否启用，true=启用，false=禁用';

-- Generated by the database client, not guaranteed complete.
CREATE TABLE positions(
    id SERIAL NOT NULL,
    name text DEFAULT ''::text,
    department_id integer NOT NULL DEFAULT 0,
    department_code text NOT NULL DEFAULT ''::text,
    department_name text DEFAULT ''::text,
    page_power text DEFAULT ''::text,
    PRIMARY KEY(id)
);
CREATE INDEX positions_department_code_idx ON "positions" USING btree ("department_code");
CREATE INDEX positions_department_id_idx ON "positions" USING btree ("department_id");
CREATE INDEX positions_name_idx ON "positions" USING btree ("name");
COMMENT ON TABLE "positions" IS '职位管理表';
COMMENT ON COLUMN positions.id IS '主键Id';
COMMENT ON COLUMN positions.name IS '职位名称';
COMMENT ON COLUMN positions.department_id IS '部门自编号ID';
COMMENT ON COLUMN positions.department_code IS '部门编号';
COMMENT ON COLUMN positions.department_name IS '部门名称';
COMMENT ON COLUMN positions.page_power IS '菜单操作权限，有操作权限的菜单ID列表：,1,2,3,4,5,';

-- Generated by the database client, not guaranteed complete.
CREATE TABLE power(
    id SERIAL NOT NULL,
    name character varying(32) NOT NULL,
    url text,
    menus_id integer NOT NULL,
    parent_id integer,
    PRIMARY KEY(id),
    CONSTRAINT power_menus_id_fkey FOREIGN key(menus_id) REFERENCES menu(id),CONSTRAINT power_parent_id_fkey FOREIGN key(parent_id) REFERENCES power(id)
);
CREATE INDEX power_menus_id ON "power" USING btree ("menus_id");
CREATE INDEX power_parent_id ON "power" USING btree ("parent_id");

-- Generated by the database client, not guaranteed complete.
CREATE TABLE product(
    id SERIAL NOT NULL,
    name text NOT NULL DEFAULT ''::text,
    code text DEFAULT ''::text,
    product_class_id integer DEFAULT 0,
    standard text DEFAULT ''::text,
    quality_guarantee_period text DEFAULT ''::text,
    place_of_origin text DEFAULT ''::text,
    front_cover_img text DEFAULT ''::text,
    content text DEFAULT ''::text,
    is_enable integer DEFAULT 0,
    add_time timestamp without time zone NOT NULL DEFAULT now(),
    PRIMARY KEY(id)
);
COMMENT ON TABLE "product" IS '产品信息';
COMMENT ON COLUMN product.id IS '主键Id';
COMMENT ON COLUMN product.name IS '菜单名称或各个页面功能名称';
COMMENT ON COLUMN product.code IS '产品编码';
COMMENT ON COLUMN product.product_class_id IS '所属产品分类';
COMMENT ON COLUMN product.standard IS '产品规格';
COMMENT ON COLUMN product.quality_guarantee_period IS '保质期';
COMMENT ON COLUMN product.place_of_origin IS '产地';
COMMENT ON COLUMN product.front_cover_img IS '封面图片地址（展示图片）';
COMMENT ON COLUMN product.content IS '产品描述';
COMMENT ON COLUMN product.is_enable IS '是否启用，1=true(启用)，0=false（禁用）';
COMMENT ON COLUMN product.add_time IS '添加时间';

-- Generated by the database client, not guaranteed complete.
CREATE TABLE product_class(
    id SERIAL NOT NULL,
    name text NOT NULL DEFAULT ''::text,
    is_enable integer DEFAULT 0,
    add_time timestamp without time zone NOT NULL DEFAULT now(),
    PRIMARY KEY(id)
);
COMMENT ON TABLE "product_class" IS '产品分类';
COMMENT ON COLUMN product_class.id IS '主键Id';
COMMENT ON COLUMN product_class.name IS '菜单名称或各个页面功能名称';
COMMENT ON COLUMN product_class.is_enable IS '是否启用，1=true(启用)，0=false（禁用）';
COMMENT ON COLUMN product_class.add_time IS '添加时间';

-- Generated by the database client, not guaranteed complete.
CREATE TABLE role(
    id SERIAL NOT NULL,
    name character varying(32) NOT NULL,
    "desc" character varying(50),
    flag character varying(64),
    parent_id integer,
    PRIMARY KEY(id),
    CONSTRAINT role_parent_id_fkey FOREIGN key(parent_id) REFERENCES role(id)
);
CREATE UNIQUE INDEX role_name ON "role" USING btree ("name");
CREATE INDEX role_parent_id ON "role" USING btree ("parent_id");

-- Generated by the database client, not guaranteed complete.
CREATE TABLE role_menu_through(
    id SERIAL NOT NULL,
    role_id integer NOT NULL,
    menu_id integer NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT role_menu_through_role_id_fkey FOREIGN key(role_id) REFERENCES role(id),CONSTRAINT role_menu_through_menu_id_fkey FOREIGN key(menu_id) REFERENCES menu(id)
);
CREATE INDEX role_menu_through_role_id ON "role_menu_through" USING btree ("role_id");
CREATE INDEX role_menu_through_menu_id ON "role_menu_through" USING btree ("menu_id");
CREATE UNIQUE INDEX role_menu_through_role_id_menu_id ON "role_menu_through" USING btree ("role_id","menu_id");

-- Generated by the database client, not guaranteed complete.
CREATE TABLE role_power_through(
    id SERIAL NOT NULL,
    role_id integer NOT NULL,
    power_id integer NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT role_power_through_role_id_fkey FOREIGN key(role_id) REFERENCES role(id),CONSTRAINT role_power_through_power_id_fkey FOREIGN key(power_id) REFERENCES power(id)
);
CREATE INDEX role_power_through_role_id ON "role_power_through" USING btree ("role_id");
CREATE INDEX role_power_through_power_id ON "role_power_through" USING btree ("power_id");
CREATE UNIQUE INDEX role_power_through_role_id_power_id ON "role_power_through" USING btree ("role_id","power_id");

-- Generated by the database client, not guaranteed complete.
CREATE TABLE user(
    id SERIAL NOT NULL,
    login_name character varying(64) NOT NULL,
    login_password character varying(64) NOT NULL,
    mobile character varying(11) NOT NULL,
    login_key text,
    last_login_time timestamp without time zone NOT NULL,
    last_login_ip text NOT NULL,
    login_count integer NOT NULL,
    is_work boolean NOT NULL,
    is_enabled boolean NOT NULL,
    lock_release_time timestamp without time zone,
    create_time timestamp without time zone NOT NULL,
    PRIMARY KEY(id)
);
CREATE UNIQUE INDEX user_login_name ON ""user"" USING btree ("login_name");

-- Generated by the database client, not guaranteed complete.
CREATE TABLE user_group_through(
    id SERIAL NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT user_group_through_user_id_fkey FOREIGN key(user_id) REFERENCES user(id),CONSTRAINT user_group_through_group_id_fkey FOREIGN key(group_id) REFERENCES group(id)
);
CREATE INDEX user_group_through_user_id ON "user_group_through" USING btree ("user_id");
CREATE INDEX user_group_through_group_id ON "user_group_through" USING btree ("group_id");
CREATE UNIQUE INDEX user_group_through_user_id_group_id ON "user_group_through" USING btree ("user_id","group_id");

-- Generated by the database client, not guaranteed complete.
CREATE TABLE user_role_through(
    id SERIAL NOT NULL,
    user_id integer NOT NULL,
    role_id integer NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT user_role_through_user_id_fkey FOREIGN key(user_id) REFERENCES user(id),CONSTRAINT user_role_through_role_id_fkey FOREIGN key(role_id) REFERENCES role(id)
);
CREATE INDEX user_role_through_user_id ON "user_role_through" USING btree ("user_id");
CREATE INDEX user_role_through_role_id ON "user_role_through" USING btree ("role_id");
CREATE UNIQUE INDEX user_role_through_user_id_role_id ON "user_role_through" USING btree ("user_id","role_id");